=begin
#Edmentum Web API - v2.0

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.33

=end

require 'uri'

module EdmentumClient
  class V20AdministrationCenterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get number of Mastery Test locks, items ready to score, and new message alerts.
    # Number of alerts returned is by instructor per program.  <br></br>  Optionally, specific userIds can be given as a query string parameter to only get counts for those users.  Count of messages and announcements are for all programs.
    # @param program_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :user_ids
    # @return [EdApiModelsResultsWithCountEdApiModelsUserProgramAlertSummary]
    def alerts_controller_get_alert_summary_for_program(program_id, opts = {})
      data, _status_code, _headers = alerts_controller_get_alert_summary_for_program_with_http_info(program_id, opts)
      data
    end

    # Get number of Mastery Test locks, items ready to score, and new message alerts.
    # Number of alerts returned is by instructor per program.  &lt;br&gt;&lt;/br&gt;  Optionally, specific userIds can be given as a query string parameter to only get counts for those users.  Count of messages and announcements are for all programs.
    # @param program_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :user_ids
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsUserProgramAlertSummary, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsUserProgramAlertSummary data, response status code and response headers
    def alerts_controller_get_alert_summary_for_program_with_http_info(program_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.alerts_controller_get_alert_summary_for_program ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling V20AdministrationCenterApi.alerts_controller_get_alert_summary_for_program"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/alerts/{programId}/summary'.sub('{' + 'programId' + '}', program_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'userIds'] = @api_client.build_collection_param(opts[:'user_ids'], :multi) if !opts[:'user_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsUserProgramAlertSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#alerts_controller_get_alert_summary_for_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of locations the user has access to.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsLocationStructure]
    def locations_controller_get_locations(opts = {})
      data, _status_code, _headers = locations_controller_get_locations_with_http_info(opts)
      data
    end

    # Get the list of locations the user has access to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsLocationStructure, Fixnum, Hash)>] EdApiModelsLocationStructure data, response status code and response headers
    def locations_controller_get_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.locations_controller_get_locations ...'
      end
      # resource path
      local_var_path = '/admincenter/v2.0/locations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsLocationStructure')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#locations_controller_get_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get messages for account on or after a certain startDate
    # <ul>    <li>This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.</li>    <li>$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.</li>    <li>If no $skip is provided, the call will return the first page of the result set.</li>    <li>The next set of records can be obtained by making a request to the value of the \"Next\" field returned in the response.</li>  </ul>  <br>For example:</br>  <ul>    <li>?$pagesize=10000&amp;$skip=10000;startDate=1/1/2021 - get results from 10000 - 19999 (next 10000 records).</li>    <li>\"Next\": \"/admincenter/v2.0/messages?$pagesize=10000&amp;$skip=10000&amp;startDate=1/1/2021\"</li>  </ul>
    # @param pagesize (Required) Number of results to return in a request, with a maximum page size of 10000
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [DateTime] :start_date Optional Start Date, when provided all messages on or after this date will be included in result set
    # @return [EdApiPageableResultsWithCountEdApiModelsMessage]
    def messages_controller_get_messages(pagesize, opts = {})
      data, _status_code, _headers = messages_controller_get_messages_with_http_info(pagesize, opts)
      data
    end

    # Get messages for account on or after a certain startDate
    # &lt;ul&gt;    &lt;li&gt;This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.&lt;/li&gt;    &lt;li&gt;$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.&lt;/li&gt;    &lt;li&gt;If no $skip is provided, the call will return the first page of the result set.&lt;/li&gt;    &lt;li&gt;The next set of records can be obtained by making a request to the value of the \&quot;Next\&quot; field returned in the response.&lt;/li&gt;  &lt;/ul&gt;  &lt;br&gt;For example:&lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000;startDate&#x3D;1/1/2021 - get results from 10000 - 19999 (next 10000 records).&lt;/li&gt;    &lt;li&gt;\&quot;Next\&quot;: \&quot;/admincenter/v2.0/messages?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000&amp;amp;startDate&#x3D;1/1/2021\&quot;&lt;/li&gt;  &lt;/ul&gt;
    # @param pagesize (Required) Number of results to return in a request, with a maximum page size of 10000
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [DateTime] :start_date Optional Start Date, when provided all messages on or after this date will be included in result set
    # @return [Array<(EdApiPageableResultsWithCountEdApiModelsMessage, Fixnum, Hash)>] EdApiPageableResultsWithCountEdApiModelsMessage data, response status code and response headers
    def messages_controller_get_messages_with_http_info(pagesize, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.messages_controller_get_messages ...'
      end
      # verify the required parameter 'pagesize' is set
      if @api_client.config.client_side_validation && pagesize.nil?
        fail ArgumentError, "Missing the required parameter 'pagesize' when calling V20AdministrationCenterApi.messages_controller_get_messages"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/messages'

      # query parameters
      query_params = {}
      query_params[:'$pagesize'] = pagesize
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiPageableResultsWithCountEdApiModelsMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#messages_controller_get_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of programs the user has access to.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsProgram]
    def programs_controller_get_programs(opts = {})
      data, _status_code, _headers = programs_controller_get_programs_with_http_info(opts)
      data
    end

    # Get the list of programs the user has access to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsProgram, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsProgram data, response status code and response headers
    def programs_controller_get_programs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.programs_controller_get_programs ...'
      end
      # resource path
      local_var_path = '/admincenter/v2.0/programs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#programs_controller_get_programs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update program access type for a user.
    # @param programid
    # @param userid
    # @param access_type Possible values for access type:              &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;None&lt;/li&gt;&lt;li&gt;ProgramAdministrator&lt;/li&gt;&lt;li&gt;Teacher&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [String]
    def programs_controller_update_user_program_access(programid, userid, access_type, opts = {})
      data, _status_code, _headers = programs_controller_update_user_program_access_with_http_info(programid, userid, access_type, opts)
      data
    end

    # Update program access type for a user.
    # @param programid
    # @param userid
    # @param access_type Possible values for access type:              &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;None&lt;/li&gt;&lt;li&gt;ProgramAdministrator&lt;/li&gt;&lt;li&gt;Teacher&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def programs_controller_update_user_program_access_with_http_info(programid, userid, access_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.programs_controller_update_user_program_access ...'
      end
      # verify the required parameter 'programid' is set
      if @api_client.config.client_side_validation && programid.nil?
        fail ArgumentError, "Missing the required parameter 'programid' when calling V20AdministrationCenterApi.programs_controller_update_user_program_access"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.programs_controller_update_user_program_access"
      end
      # verify the required parameter 'access_type' is set
      if @api_client.config.client_side_validation && access_type.nil?
        fail ArgumentError, "Missing the required parameter 'access_type' when calling V20AdministrationCenterApi.programs_controller_update_user_program_access"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/programs/{programid}/users/{userid}/{accessType}'.sub('{' + 'programid' + '}', programid.to_s).sub('{' + 'userid' + '}', userid.to_s).sub('{' + 'accessType' + '}', access_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#programs_controller_update_user_program_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get TimeOnSystem data for account on or after a certain startDate
    # <ul>    <li>This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.</li>    <li>$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.</li>    <li>If no $skip is provided, the call will return the first page of the result set.</li>    <li>The next set of records can be obtained by making a request to the value of the \"Next\" field returned in the response.</li>  </ul>  <br>For example:</br>  <ul>    <li>?$pagesize=10000&amp;$skip=10000;startDate=1/1/2021 - get results from 10000 - 19999 (next 10000 records).</li>    <li>\"Next\": \"/admincenter/v2.0/timeonsystem?$pagesize=10000&amp;$skip=10000&amp;startDate=1/1/2021\"</li>  </ul>
    # @param start_date (Required) All usage data occurring on or after this date will be included in the result set
    # @param pagesize (Required) Number of results to return in a request, with a maximum page size of 10000
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @return [EdApiPageableResultsWithCountEdCoreDomainReportingUserTimeOnSystem]
    def time_on_system_controller_user_time_on_system(start_date, pagesize, opts = {})
      data, _status_code, _headers = time_on_system_controller_user_time_on_system_with_http_info(start_date, pagesize, opts)
      data
    end

    # Get TimeOnSystem data for account on or after a certain startDate
    # &lt;ul&gt;    &lt;li&gt;This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.&lt;/li&gt;    &lt;li&gt;$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.&lt;/li&gt;    &lt;li&gt;If no $skip is provided, the call will return the first page of the result set.&lt;/li&gt;    &lt;li&gt;The next set of records can be obtained by making a request to the value of the \&quot;Next\&quot; field returned in the response.&lt;/li&gt;  &lt;/ul&gt;  &lt;br&gt;For example:&lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000;startDate&#x3D;1/1/2021 - get results from 10000 - 19999 (next 10000 records).&lt;/li&gt;    &lt;li&gt;\&quot;Next\&quot;: \&quot;/admincenter/v2.0/timeonsystem?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000&amp;amp;startDate&#x3D;1/1/2021\&quot;&lt;/li&gt;  &lt;/ul&gt;
    # @param start_date (Required) All usage data occurring on or after this date will be included in the result set
    # @param pagesize (Required) Number of results to return in a request, with a maximum page size of 10000
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @return [Array<(EdApiPageableResultsWithCountEdCoreDomainReportingUserTimeOnSystem, Fixnum, Hash)>] EdApiPageableResultsWithCountEdCoreDomainReportingUserTimeOnSystem data, response status code and response headers
    def time_on_system_controller_user_time_on_system_with_http_info(start_date, pagesize, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.time_on_system_controller_user_time_on_system ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling V20AdministrationCenterApi.time_on_system_controller_user_time_on_system"
      end
      # verify the required parameter 'pagesize' is set
      if @api_client.config.client_side_validation && pagesize.nil?
        fail ArgumentError, "Missing the required parameter 'pagesize' when calling V20AdministrationCenterApi.time_on_system_controller_user_time_on_system"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/timeonsystem'

      # query parameters
      query_params = {}
      query_params[:'startDate'] = start_date
      query_params[:'$pagesize'] = pagesize
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiPageableResultsWithCountEdCoreDomainReportingUserTimeOnSystem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#time_on_system_controller_user_time_on_system\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a user to a location.
    # @param userid The user id.
    # @param locationid The location id.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_controller_add_user_to_location(userid, locationid, opts = {})
      data, _status_code, _headers = users_controller_add_user_to_location_with_http_info(userid, locationid, opts)
      data
    end

    # Add a user to a location.
    # @param userid The user id.
    # @param locationid The location id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def users_controller_add_user_to_location_with_http_info(userid, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_add_user_to_location ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_add_user_to_location"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling V20AdministrationCenterApi.users_controller_add_user_to_location"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/locations/{locationid}'.sub('{' + 'userid' + '}', userid.to_s).sub('{' + 'locationid' + '}', locationid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_add_user_to_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create family contact and link to a learner.
    # @param userid Learner userId to link to new family contact.
    # @param family_contact_learner Family contact user to create plus learner relationship details.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;FirstName, LastName - family contact name, required&lt;/li&gt;&lt;li&gt;EmailAddress - family contact email address, required and unique - used as family contact UserName&lt;/li&gt;&lt;li&gt;Relationship - family contact relationship to learner, optional&lt;/li&gt;&lt;li&gt;OptOutOfEmails - flag indicating whether family contact should be opted out of emails from LMS (false by default); API is not sending emails to family contacts, this flag controls LMS functionality&lt;/li&gt;&lt;li&gt;Password - family contact password, required, must be at least 8 characters&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsFamilyContactLearner]
    def users_controller_create_family_contact(userid, family_contact_learner, opts = {})
      data, _status_code, _headers = users_controller_create_family_contact_with_http_info(userid, family_contact_learner, opts)
      data
    end

    # Create family contact and link to a learner.
    # @param userid Learner userId to link to new family contact.
    # @param family_contact_learner Family contact user to create plus learner relationship details.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;FirstName, LastName - family contact name, required&lt;/li&gt;&lt;li&gt;EmailAddress - family contact email address, required and unique - used as family contact UserName&lt;/li&gt;&lt;li&gt;Relationship - family contact relationship to learner, optional&lt;/li&gt;&lt;li&gt;OptOutOfEmails - flag indicating whether family contact should be opted out of emails from LMS (false by default); API is not sending emails to family contacts, this flag controls LMS functionality&lt;/li&gt;&lt;li&gt;Password - family contact password, required, must be at least 8 characters&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsFamilyContactLearner, Fixnum, Hash)>] EdApiModelsFamilyContactLearner data, response status code and response headers
    def users_controller_create_family_contact_with_http_info(userid, family_contact_learner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_create_family_contact ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_create_family_contact"
      end
      # verify the required parameter 'family_contact_learner' is set
      if @api_client.config.client_side_validation && family_contact_learner.nil?
        fail ArgumentError, "Missing the required parameter 'family_contact_learner' when calling V20AdministrationCenterApi.users_controller_create_family_contact"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/familycontacts'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(family_contact_learner)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsFamilyContactLearner')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_create_family_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new user.
    # @param user The user to create.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;UserId is ignored on the create/POST request.&lt;/li&gt;&lt;li&gt;Possible values for Role: accountadministrator,programadministrator, teacher, learner&lt;/li&gt;&lt;li&gt;Possible values for grade are :  [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;]&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsUser]
    def users_controller_create_user(user, opts = {})
      data, _status_code, _headers = users_controller_create_user_with_http_info(user, opts)
      data
    end

    # Create a new user.
    # @param user The user to create.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;UserId is ignored on the create/POST request.&lt;/li&gt;&lt;li&gt;Possible values for Role: accountadministrator,programadministrator, teacher, learner&lt;/li&gt;&lt;li&gt;Possible values for grade are :  [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;]&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsUser, Fixnum, Hash)>] EdApiModelsUser data, response status code and response headers
    def users_controller_create_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_create_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling V20AdministrationCenterApi.users_controller_create_user"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a an existing user.
    # @param userid The user id.              &lt;br&gt;              A learner can be deleted only if it was never enrolled in a class/assignment              A teacher can be deleted on un-enrollment from all class/assignments              &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_controller_delete_user(userid, opts = {})
      data, _status_code, _headers = users_controller_delete_user_with_http_info(userid, opts)
      data
    end

    # Delete a an existing user.
    # @param userid The user id.              &lt;br&gt;              A learner can be deleted only if it was never enrolled in a class/assignment              A teacher can be deleted on un-enrollment from all class/assignments              &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def users_controller_delete_user_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_delete_user ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_delete_user"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get family contacts linked to a learner.
    # <br>Passwords not returned in response for security reasons.</br>
    # @param userid Learner userId.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsFamilyContactLearner]
    def users_controller_get_learner_family_contacts(userid, opts = {})
      data, _status_code, _headers = users_controller_get_learner_family_contacts_with_http_info(userid, opts)
      data
    end

    # Get family contacts linked to a learner.
    # &lt;br&gt;Passwords not returned in response for security reasons.&lt;/br&gt;
    # @param userid Learner userId.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsFamilyContactLearner, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsFamilyContactLearner data, response status code and response headers
    def users_controller_get_learner_family_contacts_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_get_learner_family_contacts ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_get_learner_family_contacts"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/familycontacts'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsFamilyContactLearner')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_get_learner_family_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a user by UserID.
    # @param userid The user id.              &lt;br&gt;              Password will not be returned in response for security reasons.               &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsUser]
    def users_controller_get_single_user(userid, opts = {})
      data, _status_code, _headers = users_controller_get_single_user_with_http_info(userid, opts)
      data
    end

    # Get a user by UserID.
    # @param userid The user id.              &lt;br&gt;              Password will not be returned in response for security reasons.               &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsUser, Fixnum, Hash)>] EdApiModelsUser data, response status code and response headers
    def users_controller_get_single_user_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_get_single_user ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_get_single_user"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_get_single_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of locations the user is added to.
    # @param userid The user id.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsLocation]
    def users_controller_get_user_locations(userid, opts = {})
      data, _status_code, _headers = users_controller_get_user_locations_with_http_info(userid, opts)
      data
    end

    # Get a list of locations the user is added to.
    # @param userid The user id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsLocation, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsLocation data, response status code and response headers
    def users_controller_get_user_locations_with_http_info(userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_get_user_locations ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_get_user_locations"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/locations'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_get_user_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of users that the user can update or delete.
    # <ul>    <li>This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.</li>    <li>$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.</li>    <li>If no $skip is provided, the call will return the first page of the result set.</li>    <li>The next set of records can be obtained by making a request to the value of the \"Next\" field returned in the response.</li>  </ul>  <br>For example:</br>  <ul>    <li>?$pagesize=10000&amp;$skip=10000 - get results from 10000 - 19999 (next 10000 records).</li>    <li>\"Next\": \"/admincenter/v2.0/users?$pagesize=10000&amp;$skip=10000\"</li>  </ul>
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [String] :sis_id (Optional) Result set will be filtered down to users matching the supplied Student Information System Id (SisID)
    # @return [EdApiPageableResultsWithCountEdApiModelsUser]
    def users_controller_get_users(pagesize, opts = {})
      data, _status_code, _headers = users_controller_get_users_with_http_info(pagesize, opts)
      data
    end

    # Get a list of users that the user can update or delete.
    # &lt;ul&gt;    &lt;li&gt;This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.&lt;/li&gt;    &lt;li&gt;$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.&lt;/li&gt;    &lt;li&gt;If no $skip is provided, the call will return the first page of the result set.&lt;/li&gt;    &lt;li&gt;The next set of records can be obtained by making a request to the value of the \&quot;Next\&quot; field returned in the response.&lt;/li&gt;  &lt;/ul&gt;  &lt;br&gt;For example:&lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000 - get results from 10000 - 19999 (next 10000 records).&lt;/li&gt;    &lt;li&gt;\&quot;Next\&quot;: \&quot;/admincenter/v2.0/users?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000\&quot;&lt;/li&gt;  &lt;/ul&gt;
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [String] :sis_id (Optional) Result set will be filtered down to users matching the supplied Student Information System Id (SisID)
    # @return [Array<(EdApiPageableResultsWithCountEdApiModelsUser, Fixnum, Hash)>] EdApiPageableResultsWithCountEdApiModelsUser data, response status code and response headers
    def users_controller_get_users_with_http_info(pagesize, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_get_users ...'
      end
      # verify the required parameter 'pagesize' is set
      if @api_client.config.client_side_validation && pagesize.nil?
        fail ArgumentError, "Missing the required parameter 'pagesize' when calling V20AdministrationCenterApi.users_controller_get_users"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users'

      # query parameters
      query_params = {}
      query_params[:'$pagesize'] = pagesize
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'sisId'] = opts[:'sis_id'] if !opts[:'sis_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiPageableResultsWithCountEdApiModelsUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update password for a user.
    # @param userid
    # @param password
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_controller_password(userid, password, opts = {})
      data, _status_code, _headers = users_controller_password_with_http_info(userid, password, opts)
      data
    end

    # Update password for a user.
    # @param userid
    # @param password
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def users_controller_password_with_http_info(userid, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_password ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_password"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling V20AdministrationCenterApi.users_controller_password"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/password'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(password)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a user from a location.
    # @param userid The user id.
    # @param locationid The location id.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_controller_remove_user_from_location(userid, locationid, opts = {})
      data, _status_code, _headers = users_controller_remove_user_from_location_with_http_info(userid, locationid, opts)
      data
    end

    # Remove a user from a location.
    # @param userid The user id.
    # @param locationid The location id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def users_controller_remove_user_from_location_with_http_info(userid, locationid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_remove_user_from_location ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_remove_user_from_location"
      end
      # verify the required parameter 'locationid' is set
      if @api_client.config.client_side_validation && locationid.nil?
        fail ArgumentError, "Missing the required parameter 'locationid' when calling V20AdministrationCenterApi.users_controller_remove_user_from_location"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/locations/{locationid}'.sub('{' + 'userid' + '}', userid.to_s).sub('{' + 'locationid' + '}', locationid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_remove_user_from_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset family contact password.
    # @param userid Learner userId.
    # @param familycontactid Family contact id.
    # @param password Family contact password, required, must be at least 8 characters.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_controller_reset_family_contact_password(userid, familycontactid, password, opts = {})
      data, _status_code, _headers = users_controller_reset_family_contact_password_with_http_info(userid, familycontactid, password, opts)
      data
    end

    # Reset family contact password.
    # @param userid Learner userId.
    # @param familycontactid Family contact id.
    # @param password Family contact password, required, must be at least 8 characters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def users_controller_reset_family_contact_password_with_http_info(userid, familycontactid, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_reset_family_contact_password ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_reset_family_contact_password"
      end
      # verify the required parameter 'familycontactid' is set
      if @api_client.config.client_side_validation && familycontactid.nil?
        fail ArgumentError, "Missing the required parameter 'familycontactid' when calling V20AdministrationCenterApi.users_controller_reset_family_contact_password"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling V20AdministrationCenterApi.users_controller_reset_family_contact_password"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/familycontacts/{familycontactid}'.sub('{' + 'userid' + '}', userid.to_s).sub('{' + 'familycontactid' + '}', familycontactid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(password)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_reset_family_contact_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unlink learner from family contact.
    # @param userid Learner userId.
    # @param familycontactid Family contact id.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_controller_unlink_family_contact_learner(userid, familycontactid, opts = {})
      data, _status_code, _headers = users_controller_unlink_family_contact_learner_with_http_info(userid, familycontactid, opts)
      data
    end

    # Unlink learner from family contact.
    # @param userid Learner userId.
    # @param familycontactid Family contact id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def users_controller_unlink_family_contact_learner_with_http_info(userid, familycontactid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_unlink_family_contact_learner ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_unlink_family_contact_learner"
      end
      # verify the required parameter 'familycontactid' is set
      if @api_client.config.client_side_validation && familycontactid.nil?
        fail ArgumentError, "Missing the required parameter 'familycontactid' when calling V20AdministrationCenterApi.users_controller_unlink_family_contact_learner"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/familycontacts/{familycontactid}'.sub('{' + 'userid' + '}', userid.to_s).sub('{' + 'familycontactid' + '}', familycontactid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_unlink_family_contact_learner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update family contact and / or link to a learner.
    # @param userid Learner userId to link family contact to.
    # @param family_contact_learner Family contact user to update plus learner relationship details.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;FirstName, LastName - family contact name, required&lt;/li&gt;&lt;li&gt;EmailAddress - family contact email address, required and unique - used as family contact UserName&lt;/li&gt;&lt;li&gt;Relationship - family contact relationship to learner, optional&lt;/li&gt;&lt;li&gt;OptOutOfEmails - flag indicating whether family contact should be opted out of emails from LMS (false by default); API is not sending emails to family contacts, this flag controls LMS functionality&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsFamilyContactLearner]
    def users_controller_update_family_contact(userid, family_contact_learner, opts = {})
      data, _status_code, _headers = users_controller_update_family_contact_with_http_info(userid, family_contact_learner, opts)
      data
    end

    # Update family contact and / or link to a learner.
    # @param userid Learner userId to link family contact to.
    # @param family_contact_learner Family contact user to update plus learner relationship details.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;FirstName, LastName - family contact name, required&lt;/li&gt;&lt;li&gt;EmailAddress - family contact email address, required and unique - used as family contact UserName&lt;/li&gt;&lt;li&gt;Relationship - family contact relationship to learner, optional&lt;/li&gt;&lt;li&gt;OptOutOfEmails - flag indicating whether family contact should be opted out of emails from LMS (false by default); API is not sending emails to family contacts, this flag controls LMS functionality&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsFamilyContactLearner, Fixnum, Hash)>] EdApiModelsFamilyContactLearner data, response status code and response headers
    def users_controller_update_family_contact_with_http_info(userid, family_contact_learner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_update_family_contact ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20AdministrationCenterApi.users_controller_update_family_contact"
      end
      # verify the required parameter 'family_contact_learner' is set
      if @api_client.config.client_side_validation && family_contact_learner.nil?
        fail ArgumentError, "Missing the required parameter 'family_contact_learner' when calling V20AdministrationCenterApi.users_controller_update_family_contact"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users/{userid}/familycontacts'.sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(family_contact_learner)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsFamilyContactLearner')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_update_family_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing user (does not allow changing user's password).
    # @param user The user to update.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;UserId is required on the update/PUT request.&lt;/li&gt;&lt;li&gt;User passwords may be updated with a PUT request to: /admincenter/V2/users/{userid}/password&lt;/li&gt;&lt;li&gt;Possible values for Role: accountadministrator,programadministrator, teacher, learner &lt;/li&gt;&lt;li&gt;Possible values for Grade:  [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;]&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsUser]
    def users_controller_update_user(user, opts = {})
      data, _status_code, _headers = users_controller_update_user_with_http_info(user, opts)
      data
    end

    # Update an existing user (does not allow changing user&#39;s password).
    # @param user The user to update.  &lt;ul style&#x3D;\&quot;font-size: smaller;\&quot;&gt;&lt;li&gt;UserId is required on the update/PUT request.&lt;/li&gt;&lt;li&gt;User passwords may be updated with a PUT request to: /admincenter/V2/users/{userid}/password&lt;/li&gt;&lt;li&gt;Possible values for Role: accountadministrator,programadministrator, teacher, learner &lt;/li&gt;&lt;li&gt;Possible values for Grade:  [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;]&lt;/li&gt;&lt;/ul&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsUser, Fixnum, Hash)>] EdApiModelsUser data, response status code and response headers
    def users_controller_update_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20AdministrationCenterApi.users_controller_update_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling V20AdministrationCenterApi.users_controller_update_user"
      end
      # resource path
      local_var_path = '/admincenter/v2.0/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20AdministrationCenterApi#users_controller_update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
