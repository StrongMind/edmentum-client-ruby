=begin
#Edmentum Web API - v2.0

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.33

=end

require 'uri'

module EdmentumClient
  class V20CoursewareApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Enroll a user in a Courseware class.
    # @param classid
    # @param userid
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start_date End Date needs to be greater than Start Date (time of day is ignored).
    # @option opts [DateTime] :end_date
    # @return [String]
    def classes_controller_enroll_courseware_user(classid, userid, opts = {})
      data, _status_code, _headers = classes_controller_enroll_courseware_user_with_http_info(classid, userid, opts)
      data
    end

    # Enroll a user in a Courseware class.
    # @param classid
    # @param userid
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :start_date End Date needs to be greater than Start Date (time of day is ignored).
    # @option opts [DateTime] :end_date
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def classes_controller_enroll_courseware_user_with_http_info(classid, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_enroll_courseware_user ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_enroll_courseware_user"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20CoursewareApi.classes_controller_enroll_courseware_user"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/users/{userid}'.sub('{' + 'classid' + '}', classid.to_s).sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_enroll_courseware_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Class Activities from GradeTracker
    # @param classid The ID of the class
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :gradetracker_category_id (Optional) When supplied, filters the results down to just the given gradetrackerCategoryId.
    # @return [EdApiModelsResultsWithCountEdApiModelsActivity]
    def classes_controller_get_activities(classid, opts = {})
      data, _status_code, _headers = classes_controller_get_activities_with_http_info(classid, opts)
      data
    end

    # Get Class Activities from GradeTracker
    # @param classid The ID of the class
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :gradetracker_category_id (Optional) When supplied, filters the results down to just the given gradetrackerCategoryId.
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsActivity, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsActivity data, response status code and response headers
    def classes_controller_get_activities_with_http_info(classid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_activities ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_activities"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/gradetracker/activities'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}
      query_params[:'gradetrackerCategoryId'] = opts[:'gradetracker_category_id'] if !opts[:'gradetracker_category_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsActivity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Class Activity Scores from GradeTracker
    # @param classid The ID of the class
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :resource_node_id (Optional) When supplied, filters to the results down to just the given resoureNodeId.
    # @option opts [Integer] :learner_user_id (Optional) When supplied, filters to the results down to just the given learnerUserId.
    # @return [EdApiModelsResultsWithCountEdApiModelsActivityScore]
    def classes_controller_get_activity_scores(classid, opts = {})
      data, _status_code, _headers = classes_controller_get_activity_scores_with_http_info(classid, opts)
      data
    end

    # Get Class Activity Scores from GradeTracker
    # @param classid The ID of the class
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :resource_node_id (Optional) When supplied, filters to the results down to just the given resoureNodeId.
    # @option opts [Integer] :learner_user_id (Optional) When supplied, filters to the results down to just the given learnerUserId.
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsActivityScore, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsActivityScore data, response status code and response headers
    def classes_controller_get_activity_scores_with_http_info(classid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_activity_scores ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_activity_scores"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/gradetracker/activityscores'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}
      query_params[:'resourceNodeId'] = opts[:'resource_node_id'] if !opts[:'resource_node_id'].nil?
      query_params[:'learnerUserId'] = opts[:'learner_user_id'] if !opts[:'learner_user_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsActivityScore')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_activity_scores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current progress for all students in a Courseware class.
    # @param classid Class ID to get progress for.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsActivityProgress]
    def classes_controller_get_courseware_class_activity_progress(classid, opts = {})
      data, _status_code, _headers = classes_controller_get_courseware_class_activity_progress_with_http_info(classid, opts)
      data
    end

    # Get current progress for all students in a Courseware class.
    # @param classid Class ID to get progress for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsActivityProgress, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsActivityProgress data, response status code and response headers
    def classes_controller_get_courseware_class_activity_progress_with_http_info(classid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_courseware_class_activity_progress ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_courseware_class_activity_progress"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/gradetracker/progress'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsActivityProgress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_courseware_class_activity_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get daily activity time on task records for all students in a Courseware class.
    # <br>    <b>TimeOnTask (in minutes) property is obsolete, use TimeOnTaskInMilliseconds instead.</b>  </br>
    # @param classid Class ID to get time on task for.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate Optional Start Date, if not provided - returns all activity time on task data for that class.
    # @return [EdApiModelsResultsWithCountEdApiModelsActivityTimeOnTask]
    def classes_controller_get_courseware_class_activity_time_on_task(classid, opts = {})
      data, _status_code, _headers = classes_controller_get_courseware_class_activity_time_on_task_with_http_info(classid, opts)
      data
    end

    # Get daily activity time on task records for all students in a Courseware class.
    # &lt;br&gt;    &lt;b&gt;TimeOnTask (in minutes) property is obsolete, use TimeOnTaskInMilliseconds instead.&lt;/b&gt;  &lt;/br&gt;
    # @param classid Class ID to get time on task for.
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :startdate Optional Start Date, if not provided - returns all activity time on task data for that class.
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsActivityTimeOnTask, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsActivityTimeOnTask data, response status code and response headers
    def classes_controller_get_courseware_class_activity_time_on_task_with_http_info(classid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_courseware_class_activity_time_on_task ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_courseware_class_activity_time_on_task"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/timeontask'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}
      query_params[:'startdate'] = opts[:'startdate'] if !opts[:'startdate'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsActivityTimeOnTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_courseware_class_activity_time_on_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current grades for all students in a Courseware class.
    # @param classid Class ID to get grades for.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsCoursewareClassLearnerGrade]
    def classes_controller_get_courseware_class_learner_grades(classid, opts = {})
      data, _status_code, _headers = classes_controller_get_courseware_class_learner_grades_with_http_info(classid, opts)
      data
    end

    # Get current grades for all students in a Courseware class.
    # @param classid Class ID to get grades for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsCoursewareClassLearnerGrade, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsCoursewareClassLearnerGrade data, response status code and response headers
    def classes_controller_get_courseware_class_learner_grades_with_http_info(classid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_courseware_class_learner_grades ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_courseware_class_learner_grades"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/gradetracker/grades'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsCoursewareClassLearnerGrade')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_courseware_class_learner_grades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of users to enroll in a Courseware class.
    # <ul>    <li>This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.</li>    <li>$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.</li>    <li>If no $skip is provided, the call will return the first page of the result set.</li>    <li>The next set of records can be obtained by making a request to the value of the \"Next\" field returned in the response.</li>  </ul>  <br>For example:</br>  <ul>    <li>?$pagesize=10000&amp;$skip=10000 - get results from 10000 - 19999 (next 10000 records).</li>    <li>\"Next\": \"/courseware/v2.0/classes/{classid}/enrollableusers?$pagesize=10000&amp;$skip=10000\"</li>  </ul>
    # @param classid
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @return [EdApiPageableResultsWithCountEdApiModelsUser]
    def classes_controller_get_courseware_enrollable_users(classid, pagesize, opts = {})
      data, _status_code, _headers = classes_controller_get_courseware_enrollable_users_with_http_info(classid, pagesize, opts)
      data
    end

    # Get list of users to enroll in a Courseware class.
    # &lt;ul&gt;    &lt;li&gt;This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.&lt;/li&gt;    &lt;li&gt;$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.&lt;/li&gt;    &lt;li&gt;If no $skip is provided, the call will return the first page of the result set.&lt;/li&gt;    &lt;li&gt;The next set of records can be obtained by making a request to the value of the \&quot;Next\&quot; field returned in the response.&lt;/li&gt;  &lt;/ul&gt;  &lt;br&gt;For example:&lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000 - get results from 10000 - 19999 (next 10000 records).&lt;/li&gt;    &lt;li&gt;\&quot;Next\&quot;: \&quot;/courseware/v2.0/classes/{classid}/enrollableusers?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000\&quot;&lt;/li&gt;  &lt;/ul&gt;
    # @param classid
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @return [Array<(EdApiPageableResultsWithCountEdApiModelsUser, Fixnum, Hash)>] EdApiPageableResultsWithCountEdApiModelsUser data, response status code and response headers
    def classes_controller_get_courseware_enrollable_users_with_http_info(classid, pagesize, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_courseware_enrollable_users ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_courseware_enrollable_users"
      end
      # verify the required parameter 'pagesize' is set
      if @api_client.config.client_side_validation && pagesize.nil?
        fail ArgumentError, "Missing the required parameter 'pagesize' when calling V20CoursewareApi.classes_controller_get_courseware_enrollable_users"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/enrollableusers'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}
      query_params[:'$pagesize'] = pagesize
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiPageableResultsWithCountEdApiModelsUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_courseware_enrollable_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single user by classid and userid
    # @param classid
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsUserClassAssignment]
    def classes_controller_get_courseware_user(classid, user_id, opts = {})
      data, _status_code, _headers = classes_controller_get_courseware_user_with_http_info(classid, user_id, opts)
      data
    end

    # Get a single user by classid and userid
    # @param classid
    # @param user_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsUserClassAssignment, Fixnum, Hash)>] EdApiModelsUserClassAssignment data, response status code and response headers
    def classes_controller_get_courseware_user_with_http_info(classid, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_courseware_user ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_courseware_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling V20CoursewareApi.classes_controller_get_courseware_user"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/users/{userId}'.sub('{' + 'classid' + '}', classid.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsUserClassAssignment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_courseware_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of users in a Courseware class.
    # @param classid
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsUserClassAssignment]
    def classes_controller_get_courseware_users(classid, opts = {})
      data, _status_code, _headers = classes_controller_get_courseware_users_with_http_info(classid, opts)
      data
    end

    # Get a list of users in a Courseware class.
    # @param classid
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsUserClassAssignment, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsUserClassAssignment data, response status code and response headers
    def classes_controller_get_courseware_users_with_http_info(classid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_get_courseware_users ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_get_courseware_users"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/users'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsUserClassAssignment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_get_courseware_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer Learner from one class to another
    # @param class_id Classroom Id pertaining to classroom to transfer learner
    # @param transfer Transfer object representing LearnerUserId of learner to be transferred and the ClassroomId of the learner&#39;s current class
    # @param [Hash] opts the optional parameters
    # @return [String]
    def classes_controller_transfer_learner_to_new_class(class_id, transfer, opts = {})
      data, _status_code, _headers = classes_controller_transfer_learner_to_new_class_with_http_info(class_id, transfer, opts)
      data
    end

    # Transfer Learner from one class to another
    # @param class_id Classroom Id pertaining to classroom to transfer learner
    # @param transfer Transfer object representing LearnerUserId of learner to be transferred and the ClassroomId of the learner&#39;s current class
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def classes_controller_transfer_learner_to_new_class_with_http_info(class_id, transfer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_transfer_learner_to_new_class ...'
      end
      # verify the required parameter 'class_id' is set
      if @api_client.config.client_side_validation && class_id.nil?
        fail ArgumentError, "Missing the required parameter 'class_id' when calling V20CoursewareApi.classes_controller_transfer_learner_to_new_class"
      end
      # verify the required parameter 'transfer' is set
      if @api_client.config.client_side_validation && transfer.nil?
        fail ArgumentError, "Missing the required parameter 'transfer' when calling V20CoursewareApi.classes_controller_transfer_learner_to_new_class"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classId}/transfer'.sub('{' + 'classId' + '}', class_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transfer)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_transfer_learner_to_new_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lock/Unlock content for an entire Courseware class including students added later.
    # @param classid
    # @param resourcenodeid
    # @param model &lt;br&gt;              Locking/Unlocking a resource node locks/unlocks all children nodes               &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsClassStatus]
    def classes_controller_update_class_status(classid, resourcenodeid, model, opts = {})
      data, _status_code, _headers = classes_controller_update_class_status_with_http_info(classid, resourcenodeid, model, opts)
      data
    end

    # Lock/Unlock content for an entire Courseware class including students added later.
    # @param classid
    # @param resourcenodeid
    # @param model &lt;br&gt;              Locking/Unlocking a resource node locks/unlocks all children nodes               &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsClassStatus, Fixnum, Hash)>] EdApiModelsClassStatus data, response status code and response headers
    def classes_controller_update_class_status_with_http_info(classid, resourcenodeid, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_update_class_status ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_update_class_status"
      end
      # verify the required parameter 'resourcenodeid' is set
      if @api_client.config.client_side_validation && resourcenodeid.nil?
        fail ArgumentError, "Missing the required parameter 'resourcenodeid' when calling V20CoursewareApi.classes_controller_update_class_status"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling V20CoursewareApi.classes_controller_update_class_status"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/resourcenodes/{resourcenodeid}/status'.sub('{' + 'classid' + '}', classid.to_s).sub('{' + 'resourcenodeid' + '}', resourcenodeid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsClassStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_update_class_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lock/Unlock content for a particular user in a Courseware class.
    # @param userid
    # @param classid
    # @param resourcenodeid
    # @param model &lt;br&gt;              Locking/Unlocking a resource node locks/unlocks all children nodes               &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsClassUserStatus]
    def classes_controller_update_class_user_status(userid, classid, resourcenodeid, model, opts = {})
      data, _status_code, _headers = classes_controller_update_class_user_status_with_http_info(userid, classid, resourcenodeid, model, opts)
      data
    end

    # Lock/Unlock content for a particular user in a Courseware class.
    # @param userid
    # @param classid
    # @param resourcenodeid
    # @param model &lt;br&gt;              Locking/Unlocking a resource node locks/unlocks all children nodes               &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsClassUserStatus, Fixnum, Hash)>] EdApiModelsClassUserStatus data, response status code and response headers
    def classes_controller_update_class_user_status_with_http_info(userid, classid, resourcenodeid, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_update_class_user_status ...'
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20CoursewareApi.classes_controller_update_class_user_status"
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_update_class_user_status"
      end
      # verify the required parameter 'resourcenodeid' is set
      if @api_client.config.client_side_validation && resourcenodeid.nil?
        fail ArgumentError, "Missing the required parameter 'resourcenodeid' when calling V20CoursewareApi.classes_controller_update_class_user_status"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling V20CoursewareApi.classes_controller_update_class_user_status"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/users/{userid}/resourcenodes/{resourcenodeid}/status'.sub('{' + 'userid' + '}', userid.to_s).sub('{' + 'classid' + '}', classid.to_s).sub('{' + 'resourcenodeid' + '}', resourcenodeid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsClassUserStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_update_class_user_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Courseware class.
    # @param classid The ID of the class to update.
    # @param model The class to update.              &lt;br&gt;              ProgramID, ClassID, ResourceNodeId, ResourceNodeName and SelfEnrollCode cannot be updated once an assignment is created, so values in these parameters will be ignored.&lt;/br&gt;&lt;br&gt;              Due date needs to be greater than Start Date&lt;/br&gt;&lt;br&gt;              Valid value for MasteryTestAttempts is between 0 and 10. Zero value translates to Unlimited Mastery test Attempts              &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsClass]
    def classes_controller_update_courseware_class(classid, model, opts = {})
      data, _status_code, _headers = classes_controller_update_courseware_class_with_http_info(classid, model, opts)
      data
    end

    # Update Courseware class.
    # @param classid The ID of the class to update.
    # @param model The class to update.              &lt;br&gt;              ProgramID, ClassID, ResourceNodeId, ResourceNodeName and SelfEnrollCode cannot be updated once an assignment is created, so values in these parameters will be ignored.&lt;/br&gt;&lt;br&gt;              Due date needs to be greater than Start Date&lt;/br&gt;&lt;br&gt;              Valid value for MasteryTestAttempts is between 0 and 10. Zero value translates to Unlimited Mastery test Attempts              &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsClass, Fixnum, Hash)>] EdApiModelsClass data, response status code and response headers
    def classes_controller_update_courseware_class_with_http_info(classid, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_update_courseware_class ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_update_courseware_class"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling V20CoursewareApi.classes_controller_update_courseware_class"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}'.sub('{' + 'classid' + '}', classid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsClass')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_update_courseware_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update start and end dates for a user's Courseware Class.
    # @param class_id
    # @param user_id
    # @param start_date End Date needs to be greater than Start Date (time of day is ignored).
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :end_date
    # @return [String]
    def classes_controller_update_courseware_user_enrollment(class_id, user_id, start_date, opts = {})
      data, _status_code, _headers = classes_controller_update_courseware_user_enrollment_with_http_info(class_id, user_id, start_date, opts)
      data
    end

    # Update start and end dates for a user&#39;s Courseware Class.
    # @param class_id
    # @param user_id
    # @param start_date End Date needs to be greater than Start Date (time of day is ignored).
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :end_date
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def classes_controller_update_courseware_user_enrollment_with_http_info(class_id, user_id, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_update_courseware_user_enrollment ...'
      end
      # verify the required parameter 'class_id' is set
      if @api_client.config.client_side_validation && class_id.nil?
        fail ArgumentError, "Missing the required parameter 'class_id' when calling V20CoursewareApi.classes_controller_update_courseware_user_enrollment"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling V20CoursewareApi.classes_controller_update_courseware_user_enrollment"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling V20CoursewareApi.classes_controller_update_courseware_user_enrollment"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classId}/users/{userId}'.sub('{' + 'classId' + '}', class_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_update_courseware_user_enrollment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Withdraw a user from a Courseware class.
    # @param classid
    # @param userid
    # @param [Hash] opts the optional parameters
    # @return [String]
    def classes_controller_withdraw_courseware_user(classid, userid, opts = {})
      data, _status_code, _headers = classes_controller_withdraw_courseware_user_with_http_info(classid, userid, opts)
      data
    end

    # Withdraw a user from a Courseware class.
    # @param classid
    # @param userid
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def classes_controller_withdraw_courseware_user_with_http_info(classid, userid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.classes_controller_withdraw_courseware_user ...'
      end
      # verify the required parameter 'classid' is set
      if @api_client.config.client_side_validation && classid.nil?
        fail ArgumentError, "Missing the required parameter 'classid' when calling V20CoursewareApi.classes_controller_withdraw_courseware_user"
      end
      # verify the required parameter 'userid' is set
      if @api_client.config.client_side_validation && userid.nil?
        fail ArgumentError, "Missing the required parameter 'userid' when calling V20CoursewareApi.classes_controller_withdraw_courseware_user"
      end
      # resource path
      local_var_path = '/courseware/v2.0/classes/{classid}/users/{userid}'.sub('{' + 'classid' + '}', classid.to_s).sub('{' + 'userid' + '}', userid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#classes_controller_withdraw_courseware_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Courseware class in a program.
    # @param programid The ID of the program.
    # @param model The class to create.&lt;br /&gt;&lt;br&gt;  ClassID and ResourceNodeName are optional and values in these parameters will be ignored.&lt;/br&gt;&lt;br&gt;  Due date needs to be greater than Start Date&lt;/br&gt;&lt;br&gt;  Valid value for MasteryTestAttempts is between 0 and 10. Zero value translates to Unlimited Mastery test Attempts&lt;/br&gt;&lt;br&gt;  SelfEnrollPassword min length is 4 characters  &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsClass]
    def programs_controller_create_program_class(programid, model, opts = {})
      data, _status_code, _headers = programs_controller_create_program_class_with_http_info(programid, model, opts)
      data
    end

    # Create a Courseware class in a program.
    # @param programid The ID of the program.
    # @param model The class to create.&lt;br /&gt;&lt;br&gt;  ClassID and ResourceNodeName are optional and values in these parameters will be ignored.&lt;/br&gt;&lt;br&gt;  Due date needs to be greater than Start Date&lt;/br&gt;&lt;br&gt;  Valid value for MasteryTestAttempts is between 0 and 10. Zero value translates to Unlimited Mastery test Attempts&lt;/br&gt;&lt;br&gt;  SelfEnrollPassword min length is 4 characters  &lt;/br&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsClass, Fixnum, Hash)>] EdApiModelsClass data, response status code and response headers
    def programs_controller_create_program_class_with_http_info(programid, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.programs_controller_create_program_class ...'
      end
      # verify the required parameter 'programid' is set
      if @api_client.config.client_side_validation && programid.nil?
        fail ArgumentError, "Missing the required parameter 'programid' when calling V20CoursewareApi.programs_controller_create_program_class"
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling V20CoursewareApi.programs_controller_create_program_class"
      end
      # resource path
      local_var_path = '/courseware/v2.0/programs/{programid}/classes'.sub('{' + 'programid' + '}', programid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsClass')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#programs_controller_create_program_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Courseware classes in a Courseware program by classId.
    # @param program_id The ID of the program.
    # @param class_id The ID of the class.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsClass]
    def programs_controller_get_program_class(program_id, class_id, opts = {})
      data, _status_code, _headers = programs_controller_get_program_class_with_http_info(program_id, class_id, opts)
      data
    end

    # Get a Courseware classes in a Courseware program by classId.
    # @param program_id The ID of the program.
    # @param class_id The ID of the class.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsClass, Fixnum, Hash)>] EdApiModelsClass data, response status code and response headers
    def programs_controller_get_program_class_with_http_info(program_id, class_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.programs_controller_get_program_class ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling V20CoursewareApi.programs_controller_get_program_class"
      end
      # verify the required parameter 'class_id' is set
      if @api_client.config.client_side_validation && class_id.nil?
        fail ArgumentError, "Missing the required parameter 'class_id' when calling V20CoursewareApi.programs_controller_get_program_class"
      end
      # resource path
      local_var_path = '/courseware/v2.0/programs/{programId}/classes/{classId}'.sub('{' + 'programId' + '}', program_id.to_s).sub('{' + 'classId' + '}', class_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsClass')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#programs_controller_get_program_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of Courseware classes in a Courseware program.
    # <ul>    <li>This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.</li>    <li>$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.</li>    <li>If no $skip is provided, the call will return the first page of the result set.</li>    <li>The next set of records can be obtained by making a request to the value of the \"Next\" field returned in the response.</li>  </ul>  <br>For example:</br>  <ul>    <li>?$pagesize=10000&amp;$skip=10000 - get results from 10000 - 19999 (next 10000 records).</li>    <li>\"Next\": \"/courseware/v2.0/programs/{programid}/classes?$pagesize=10000&amp;$skip=10000\"</li>  </ul>
    # @param programid The ID of the program.
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [String] :name An optional class name to filter by.
    # @option opts [DateTime] :after_start_date
    # @return [EdApiPageableResultsWithCountEdApiModelsClass]
    def programs_controller_get_program_classes(programid, pagesize, opts = {})
      data, _status_code, _headers = programs_controller_get_program_classes_with_http_info(programid, pagesize, opts)
      data
    end

    # Get a list of Courseware classes in a Courseware program.
    # &lt;ul&gt;    &lt;li&gt;This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.&lt;/li&gt;    &lt;li&gt;$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.&lt;/li&gt;    &lt;li&gt;If no $skip is provided, the call will return the first page of the result set.&lt;/li&gt;    &lt;li&gt;The next set of records can be obtained by making a request to the value of the \&quot;Next\&quot; field returned in the response.&lt;/li&gt;  &lt;/ul&gt;  &lt;br&gt;For example:&lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000 - get results from 10000 - 19999 (next 10000 records).&lt;/li&gt;    &lt;li&gt;\&quot;Next\&quot;: \&quot;/courseware/v2.0/programs/{programid}/classes?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000\&quot;&lt;/li&gt;  &lt;/ul&gt;
    # @param programid The ID of the program.
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [String] :name An optional class name to filter by.
    # @option opts [DateTime] :after_start_date
    # @return [Array<(EdApiPageableResultsWithCountEdApiModelsClass, Fixnum, Hash)>] EdApiPageableResultsWithCountEdApiModelsClass data, response status code and response headers
    def programs_controller_get_program_classes_with_http_info(programid, pagesize, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.programs_controller_get_program_classes ...'
      end
      # verify the required parameter 'programid' is set
      if @api_client.config.client_side_validation && programid.nil?
        fail ArgumentError, "Missing the required parameter 'programid' when calling V20CoursewareApi.programs_controller_get_program_classes"
      end
      # verify the required parameter 'pagesize' is set
      if @api_client.config.client_side_validation && pagesize.nil?
        fail ArgumentError, "Missing the required parameter 'pagesize' when calling V20CoursewareApi.programs_controller_get_program_classes"
      end
      # resource path
      local_var_path = '/courseware/v2.0/programs/{programid}/classes'.sub('{' + 'programid' + '}', programid.to_s)

      # query parameters
      query_params = {}
      query_params[:'$pagesize'] = pagesize
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'afterStartDate'] = opts[:'after_start_date'] if !opts[:'after_start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiPageableResultsWithCountEdApiModelsClass')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#programs_controller_get_program_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a list of Courseware Classes (plus additional details) in a Courseware program.
    # <br>This is very similar to GET /courseware/v2.0/programs/{programid}/classes,               except that each class contains lists of UserIds for enrolled Teachers and Learners.  </br>  <ul>    <li>This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.</li>    <li>$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.</li>    <li>If no $skip is provided, the call will return the first page of the result set.</li>    <li>The next set of records can be obtained by making a request to the value of the \"Next\" field returned in the response.</li>  </ul>  <br>For example:</br>  <ul>    <li>?$pagesize=10000&amp;$skip=10000 - get results from 10000 - 19999 (next 10000 records).</li>    <li>\"Next\": \"/courseware/v2.0/programs/{programid}/classdetails?$pagesize=10000&amp;$skip=10000\"</li>  </ul>
    # @param programid The ID of the program.
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [DateTime] :after_start_date
    # @return [EdApiPageableResultsWithCountEdApiModelsClassDetail]
    def programs_controller_get_program_classes_with_user_ids(programid, pagesize, opts = {})
      data, _status_code, _headers = programs_controller_get_program_classes_with_user_ids_with_http_info(programid, pagesize, opts)
      data
    end

    # Gets a list of Courseware Classes (plus additional details) in a Courseware program.
    # &lt;br&gt;This is very similar to GET /courseware/v2.0/programs/{programid}/classes,               except that each class contains lists of UserIds for enrolled Teachers and Learners.  &lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;This dataset can be quite large so result sets are paged using $pagesize and $skip parameters.&lt;/li&gt;    &lt;li&gt;$pagesize represents the number of results to return in a request, with a maximum $pagesize of 10000.&lt;/li&gt;    &lt;li&gt;If no $skip is provided, the call will return the first page of the result set.&lt;/li&gt;    &lt;li&gt;The next set of records can be obtained by making a request to the value of the \&quot;Next\&quot; field returned in the response.&lt;/li&gt;  &lt;/ul&gt;  &lt;br&gt;For example:&lt;/br&gt;  &lt;ul&gt;    &lt;li&gt;?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000 - get results from 10000 - 19999 (next 10000 records).&lt;/li&gt;    &lt;li&gt;\&quot;Next\&quot;: \&quot;/courseware/v2.0/programs/{programid}/classdetails?$pagesize&#x3D;10000&amp;amp;$skip&#x3D;10000\&quot;&lt;/li&gt;  &lt;/ul&gt;
    # @param programid The ID of the program.
    # @param pagesize
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip
    # @option opts [DateTime] :after_start_date
    # @return [Array<(EdApiPageableResultsWithCountEdApiModelsClassDetail, Fixnum, Hash)>] EdApiPageableResultsWithCountEdApiModelsClassDetail data, response status code and response headers
    def programs_controller_get_program_classes_with_user_ids_with_http_info(programid, pagesize, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.programs_controller_get_program_classes_with_user_ids ...'
      end
      # verify the required parameter 'programid' is set
      if @api_client.config.client_side_validation && programid.nil?
        fail ArgumentError, "Missing the required parameter 'programid' when calling V20CoursewareApi.programs_controller_get_program_classes_with_user_ids"
      end
      # verify the required parameter 'pagesize' is set
      if @api_client.config.client_side_validation && pagesize.nil?
        fail ArgumentError, "Missing the required parameter 'pagesize' when calling V20CoursewareApi.programs_controller_get_program_classes_with_user_ids"
      end
      # resource path
      local_var_path = '/courseware/v2.0/programs/{programid}/classdetails'.sub('{' + 'programid' + '}', programid.to_s)

      # query parameters
      query_params = {}
      query_params[:'$pagesize'] = pagesize
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'afterStartDate'] = opts[:'after_start_date'] if !opts[:'after_start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiPageableResultsWithCountEdApiModelsClassDetail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#programs_controller_get_program_classes_with_user_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of top level resource nodes for Plato and Custom Courses. Immediate children not returned.
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResultsWithCountEdApiModelsResourceNode]
    def resource_nodes_controller_get_nodes(opts = {})
      data, _status_code, _headers = resource_nodes_controller_get_nodes_with_http_info(opts)
      data
    end

    # Get a list of top level resource nodes for Plato and Custom Courses. Immediate children not returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResultsWithCountEdApiModelsResourceNode, Fixnum, Hash)>] EdApiModelsResultsWithCountEdApiModelsResourceNode data, response status code and response headers
    def resource_nodes_controller_get_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.resource_nodes_controller_get_nodes ...'
      end
      # resource path
      local_var_path = '/courseware/v2.0/resourcenodes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResultsWithCountEdApiModelsResourceNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#resource_nodes_controller_get_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of immediate children of resourceNodeId provided.
    # @param resourcenodeid
    # @param [Hash] opts the optional parameters
    # @return [EdApiModelsResourceNode]
    def resource_nodes_controller_get_single_node(resourcenodeid, opts = {})
      data, _status_code, _headers = resource_nodes_controller_get_single_node_with_http_info(resourcenodeid, opts)
      data
    end

    # Get the list of immediate children of resourceNodeId provided.
    # @param resourcenodeid
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdApiModelsResourceNode, Fixnum, Hash)>] EdApiModelsResourceNode data, response status code and response headers
    def resource_nodes_controller_get_single_node_with_http_info(resourcenodeid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V20CoursewareApi.resource_nodes_controller_get_single_node ...'
      end
      # verify the required parameter 'resourcenodeid' is set
      if @api_client.config.client_side_validation && resourcenodeid.nil?
        fail ArgumentError, "Missing the required parameter 'resourcenodeid' when calling V20CoursewareApi.resource_nodes_controller_get_single_node"
      end
      # resource path
      local_var_path = '/courseware/v2.0/resourcenodes/{resourcenodeid}'.sub('{' + 'resourcenodeid' + '}', resourcenodeid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = opts[:auth_names] || ["Oauth2_Access_Token"]
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EdApiModelsResourceNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V20CoursewareApi#resource_nodes_controller_get_single_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
