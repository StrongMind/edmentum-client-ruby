=begin
#Edmentum Web API - v2.0

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.33

=end

require 'date'

module EdmentumClient
  class EdApiModelsClassDetail
    attr_accessor :teachers

    attr_accessor :learners

    attr_accessor :program_id

    attr_accessor :resource_node_id

    attr_accessor :resource_version

    attr_accessor :resource_node_name

    attr_accessor :class_id

    attr_accessor :name

    attr_accessor :description

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :lock_assignment_on_due_date

    attr_accessor :allow_self_enroll

    attr_accessor :is_active

    attr_accessor :self_enroll_code

    attr_accessor :self_enroll_password

    attr_accessor :mastery_test_attempts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'teachers' => :'Teachers',
        :'learners' => :'Learners',
        :'program_id' => :'ProgramId',
        :'resource_node_id' => :'ResourceNodeId',
        :'resource_version' => :'ResourceVersion',
        :'resource_node_name' => :'ResourceNodeName',
        :'class_id' => :'ClassId',
        :'name' => :'Name',
        :'description' => :'Description',
        :'start_date' => :'StartDate',
        :'end_date' => :'EndDate',
        :'lock_assignment_on_due_date' => :'LockAssignmentOnDueDate',
        :'allow_self_enroll' => :'AllowSelfEnroll',
        :'is_active' => :'IsActive',
        :'self_enroll_code' => :'SelfEnrollCode',
        :'self_enroll_password' => :'SelfEnrollPassword',
        :'mastery_test_attempts' => :'MasteryTestAttempts'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'teachers' => :'Array<Integer>',
        :'learners' => :'Array<Integer>',
        :'program_id' => :'Integer',
        :'resource_node_id' => :'Integer',
        :'resource_version' => :'Integer',
        :'resource_node_name' => :'String',
        :'class_id' => :'Integer',
        :'name' => :'String',
        :'description' => :'String',
        :'start_date' => :'DateTime',
        :'end_date' => :'DateTime',
        :'lock_assignment_on_due_date' => :'BOOLEAN',
        :'allow_self_enroll' => :'BOOLEAN',
        :'is_active' => :'BOOLEAN',
        :'self_enroll_code' => :'String',
        :'self_enroll_password' => :'String',
        :'mastery_test_attempts' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Teachers')
        if (value = attributes[:'Teachers']).is_a?(Array)
          self.teachers = value
        end
      end

      if attributes.has_key?(:'Learners')
        if (value = attributes[:'Learners']).is_a?(Array)
          self.learners = value
        end
      end

      if attributes.has_key?(:'ProgramId')
        self.program_id = attributes[:'ProgramId']
      end

      if attributes.has_key?(:'ResourceNodeId')
        self.resource_node_id = attributes[:'ResourceNodeId']
      end

      if attributes.has_key?(:'ResourceVersion')
        self.resource_version = attributes[:'ResourceVersion']
      end

      if attributes.has_key?(:'ResourceNodeName')
        self.resource_node_name = attributes[:'ResourceNodeName']
      end

      if attributes.has_key?(:'ClassId')
        self.class_id = attributes[:'ClassId']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'StartDate')
        self.start_date = attributes[:'StartDate']
      end

      if attributes.has_key?(:'EndDate')
        self.end_date = attributes[:'EndDate']
      end

      if attributes.has_key?(:'LockAssignmentOnDueDate')
        self.lock_assignment_on_due_date = attributes[:'LockAssignmentOnDueDate']
      end

      if attributes.has_key?(:'AllowSelfEnroll')
        self.allow_self_enroll = attributes[:'AllowSelfEnroll']
      end

      if attributes.has_key?(:'IsActive')
        self.is_active = attributes[:'IsActive']
      end

      if attributes.has_key?(:'SelfEnrollCode')
        self.self_enroll_code = attributes[:'SelfEnrollCode']
      end

      if attributes.has_key?(:'SelfEnrollPassword')
        self.self_enroll_password = attributes[:'SelfEnrollPassword']
      end

      if attributes.has_key?(:'MasteryTestAttempts')
        self.mastery_test_attempts = attributes[:'MasteryTestAttempts']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @resource_node_id.nil?
        invalid_properties.push('invalid value for "resource_node_id", resource_node_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @is_active.nil?
        invalid_properties.push('invalid value for "is_active", is_active cannot be nil.')
      end

      if !@self_enroll_password.nil?
        invalid_properties.push('must include a non-blank password')
      end

      if !@mastery_test_attempts.nil? && @mastery_test_attempts > 10
        invalid_properties.push('invalid value for "mastery_test_attempts", must be smaller than or equal to 10.')
      end

      if !@mastery_test_attempts.nil? && @mastery_test_attempts < 0
        invalid_properties.push('invalid value for "mastery_test_attempts", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @resource_node_id.nil?
      return false if @name.nil?
      return false if @start_date.nil?
      return false if @is_active.nil?
      return false if !@self_enroll_password.nil? && @self_enroll_password !~ Regexp.new(/^[a-zA-Z0-9@#$%&*+\\-_(),+':;?.,!\\[\\]\\s\\\\]{1,40}$/)
      return false if !@mastery_test_attempts.nil? && @mastery_test_attempts > 10
      return false if !@mastery_test_attempts.nil? && @mastery_test_attempts < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] self_enroll_password Value to be assigned
    def self_enroll_password=(self_enroll_password)
      if !self_enroll_password.nil?
        fail ArgumentError, 'must include a non-blank password'
      end

      @self_enroll_password = self_enroll_password
    end

    # Custom attribute writer method with validation
    # @param [Object] mastery_test_attempts Value to be assigned
    def mastery_test_attempts=(mastery_test_attempts)
      if !mastery_test_attempts.nil? && mastery_test_attempts > 10
        fail ArgumentError, 'invalid value for "mastery_test_attempts", must be smaller than or equal to 10.'
      end

      if !mastery_test_attempts.nil? && mastery_test_attempts < 0
        fail ArgumentError, 'invalid value for "mastery_test_attempts", must be greater than or equal to 0.'
      end

      @mastery_test_attempts = mastery_test_attempts
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          teachers == o.teachers &&
          learners == o.learners &&
          program_id == o.program_id &&
          resource_node_id == o.resource_node_id &&
          resource_version == o.resource_version &&
          resource_node_name == o.resource_node_name &&
          class_id == o.class_id &&
          name == o.name &&
          description == o.description &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          lock_assignment_on_due_date == o.lock_assignment_on_due_date &&
          allow_self_enroll == o.allow_self_enroll &&
          is_active == o.is_active &&
          self_enroll_code == o.self_enroll_code &&
          self_enroll_password == o.self_enroll_password &&
          mastery_test_attempts == o.mastery_test_attempts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [teachers, learners, program_id, resource_node_id, resource_version, resource_node_name, class_id, name, description, start_date, end_date, lock_assignment_on_due_date, allow_self_enroll, is_active, self_enroll_code, self_enroll_password, mastery_test_attempts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
