=begin
#Edmentum Web API - v2.0

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.33

=end

require 'date'

module EdmentumClient
  class EdApiModelsLearningPathProgressRow
    attr_accessor :activities_completed

    attr_accessor :grade

    attr_accessor :skills_attempted

    attr_accessor :skills_mastered_first_attempt

    attr_accessor :skills_mastered_second_attempt

    attr_accessor :skills_not_mastered

    attr_accessor :student_information_system_id

    attr_accessor :student_location

    attr_accessor :student_name

    attr_accessor :student_classes

    attr_accessor :time_on_task_learning_path_content_with_progress_check

    attr_accessor :time_on_task_learning_path_content_with_progress_check_as_string

    attr_accessor :total_system_time

    attr_accessor :total_system_time_as_string

    attr_accessor :last_use_date_language_arts

    attr_accessor :last_use_date_mathematics

    attr_accessor :last_use_date_reading

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'activities_completed' => :'ActivitiesCompleted',
        :'grade' => :'Grade',
        :'skills_attempted' => :'SkillsAttempted',
        :'skills_mastered_first_attempt' => :'SkillsMasteredFirstAttempt',
        :'skills_mastered_second_attempt' => :'SkillsMasteredSecondAttempt',
        :'skills_not_mastered' => :'SkillsNotMastered',
        :'student_information_system_id' => :'StudentInformationSystemId',
        :'student_location' => :'StudentLocation',
        :'student_name' => :'StudentName',
        :'student_classes' => :'StudentClasses',
        :'time_on_task_learning_path_content_with_progress_check' => :'TimeOnTaskLearningPathContentWithProgressCheck',
        :'time_on_task_learning_path_content_with_progress_check_as_string' => :'TimeOnTaskLearningPathContentWithProgressCheckAsString',
        :'total_system_time' => :'TotalSystemTime',
        :'total_system_time_as_string' => :'TotalSystemTimeAsString',
        :'last_use_date_language_arts' => :'LastUseDate_LanguageArts',
        :'last_use_date_mathematics' => :'LastUseDate_Mathematics',
        :'last_use_date_reading' => :'LastUseDate_Reading'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'activities_completed' => :'Integer',
        :'grade' => :'String',
        :'skills_attempted' => :'Integer',
        :'skills_mastered_first_attempt' => :'Integer',
        :'skills_mastered_second_attempt' => :'Integer',
        :'skills_not_mastered' => :'Integer',
        :'student_information_system_id' => :'String',
        :'student_location' => :'String',
        :'student_name' => :'String',
        :'student_classes' => :'String',
        :'time_on_task_learning_path_content_with_progress_check' => :'String',
        :'time_on_task_learning_path_content_with_progress_check_as_string' => :'String',
        :'total_system_time' => :'String',
        :'total_system_time_as_string' => :'String',
        :'last_use_date_language_arts' => :'DateTime',
        :'last_use_date_mathematics' => :'DateTime',
        :'last_use_date_reading' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ActivitiesCompleted')
        self.activities_completed = attributes[:'ActivitiesCompleted']
      end

      if attributes.has_key?(:'Grade')
        self.grade = attributes[:'Grade']
      end

      if attributes.has_key?(:'SkillsAttempted')
        self.skills_attempted = attributes[:'SkillsAttempted']
      end

      if attributes.has_key?(:'SkillsMasteredFirstAttempt')
        self.skills_mastered_first_attempt = attributes[:'SkillsMasteredFirstAttempt']
      end

      if attributes.has_key?(:'SkillsMasteredSecondAttempt')
        self.skills_mastered_second_attempt = attributes[:'SkillsMasteredSecondAttempt']
      end

      if attributes.has_key?(:'SkillsNotMastered')
        self.skills_not_mastered = attributes[:'SkillsNotMastered']
      end

      if attributes.has_key?(:'StudentInformationSystemId')
        self.student_information_system_id = attributes[:'StudentInformationSystemId']
      end

      if attributes.has_key?(:'StudentLocation')
        self.student_location = attributes[:'StudentLocation']
      end

      if attributes.has_key?(:'StudentName')
        self.student_name = attributes[:'StudentName']
      end

      if attributes.has_key?(:'StudentClasses')
        self.student_classes = attributes[:'StudentClasses']
      end

      if attributes.has_key?(:'TimeOnTaskLearningPathContentWithProgressCheck')
        self.time_on_task_learning_path_content_with_progress_check = attributes[:'TimeOnTaskLearningPathContentWithProgressCheck']
      end

      if attributes.has_key?(:'TimeOnTaskLearningPathContentWithProgressCheckAsString')
        self.time_on_task_learning_path_content_with_progress_check_as_string = attributes[:'TimeOnTaskLearningPathContentWithProgressCheckAsString']
      end

      if attributes.has_key?(:'TotalSystemTime')
        self.total_system_time = attributes[:'TotalSystemTime']
      end

      if attributes.has_key?(:'TotalSystemTimeAsString')
        self.total_system_time_as_string = attributes[:'TotalSystemTimeAsString']
      end

      if attributes.has_key?(:'LastUseDate_LanguageArts')
        self.last_use_date_language_arts = attributes[:'LastUseDate_LanguageArts']
      end

      if attributes.has_key?(:'LastUseDate_Mathematics')
        self.last_use_date_mathematics = attributes[:'LastUseDate_Mathematics']
      end

      if attributes.has_key?(:'LastUseDate_Reading')
        self.last_use_date_reading = attributes[:'LastUseDate_Reading']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          activities_completed == o.activities_completed &&
          grade == o.grade &&
          skills_attempted == o.skills_attempted &&
          skills_mastered_first_attempt == o.skills_mastered_first_attempt &&
          skills_mastered_second_attempt == o.skills_mastered_second_attempt &&
          skills_not_mastered == o.skills_not_mastered &&
          student_information_system_id == o.student_information_system_id &&
          student_location == o.student_location &&
          student_name == o.student_name &&
          student_classes == o.student_classes &&
          time_on_task_learning_path_content_with_progress_check == o.time_on_task_learning_path_content_with_progress_check &&
          time_on_task_learning_path_content_with_progress_check_as_string == o.time_on_task_learning_path_content_with_progress_check_as_string &&
          total_system_time == o.total_system_time &&
          total_system_time_as_string == o.total_system_time_as_string &&
          last_use_date_language_arts == o.last_use_date_language_arts &&
          last_use_date_mathematics == o.last_use_date_mathematics &&
          last_use_date_reading == o.last_use_date_reading
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [activities_completed, grade, skills_attempted, skills_mastered_first_attempt, skills_mastered_second_attempt, skills_not_mastered, student_information_system_id, student_location, student_name, student_classes, time_on_task_learning_path_content_with_progress_check, time_on_task_learning_path_content_with_progress_check_as_string, total_system_time, total_system_time_as_string, last_use_date_language_arts, last_use_date_mathematics, last_use_date_reading].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EdmentumClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
